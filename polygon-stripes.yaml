# Author @patriciogv - 2015
# original code was from PRess by patricio
# inspired by wake up city! tresselt
import:
    - https://tangrams.github.io/blocks/functions/aastep.yaml
    - https://tangrams.github.io/blocks/functions/pulse.yaml
    - https://tangrams.github.io/blocks/patterns/stripes.yaml
    - https://tangrams.github.io/blocks/space/screen.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-Nhm6Mkg

scene:
    background:
          color: [1.000, 0.941, 0.765, 0.20]
        #  color: rgb(233, 226, 206)
cameras:
    cam:
        type: flat

global:
    order: function () { return feature.sort_rank; }

layers:
    water:
        data: { source: osm }
        draw:
            waves:
                order: global.order
                cap: round
                width: 8px
                color: [0.725, 0.902, 0.929, 1.00]
                width: 5px
        lakes:
            filter: { kind: [lake, riverbank, dock, water, basin, reservoir, playa, canal, dam, ditch, drain, river, stream]}
            draw:
                lines:
                    order: global.order
                    color: [0.498, 0.871, 0.780, 1.00]
                    
                    cap: round
                    width: .5px
    earth:
        data: { source: osm }
        draw:
            border:
                order: 10000
                color: black
                cap: round
                width: 6px
    landuse:
        data: { source: osm }
        draw:
            hatch:
                order: global.order
                color: '#464C40'
    buildings:
        data: { source: osm }
        draw:
            b_border:
                order: global.order
                color: [1.000, 0.184, 0.129, 1.00]
                width: [[10, 1], [12, 1px],[14, 1px], [16, 2px], [17, 3px], [18, 5px]]
                
        # HOUSES CAN HAVE LESS OPACITY
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            lines:
                order: global.order
                color: black
                width: [[5, .25px],[15, .5px],[85, 10]]
            outlines:
                style: lines
                order: global.order
                color: [0.761, 0.710, 0.710, 1.00]
                width: [[5, 2.px],[13, 2.8px], [15, 4px],[85, 60]]

    boundaries:
        data: { source: osm }
        draw:
            lines:
                order: global.order
                color: black
                width: .3px
            outlines:
                style: lines
                order: global.order
                color: white
                width: 3px
    places:
        data: { source: osm }
        filter: { name: true }
        draw:
            text:
                font:
                    typeface: Italic 14px Times
                    fill: black
                    stroke: { color: white , width: 5 }


styles:
    pallete:
        shaders:
            blocks:
                global: |
                    // Common Values
                    //================================
                    float radio = 0.05;
                    vec2 size = vec2(1.,.6);
                    vec3 background = vec3(1.);
                    vec3 midle = vec3(0.824, 0.812, 0.804);
                    vec3 foreground = vec3(0.275,0.298,0.251);
    border:
        base: lines
        mix: [functions-pulse, functions-aastep, pallete]
        texcoords: true
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    float pattern = aastep(.5,pulse(st.x,.7,.1)+pulse(st.x,.35,.25));
                    color.rgb = mix(background,color.rgb,pattern);
    b_border:
        base: lines
        mix: [functions-pulse, functions-aastep, pallete]
        texcoords: true
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    float pattern = aastep(.5,pulse(st.x,.5,.2));
                    color.rgb = mix(background,color.rgb,pattern);

    waves:
        base: polygons
        mix: [space-screen, pallete, patterns-stripes]
        shaders:
            blocks:
                color: |
                    vec2 pos = getScreenNonStretchCoords();
                    pos.y += sin(pos.x*30.)*.01;
                    color.rgb = mix(color.rgb,background,stripes(pos*200.,.4));
    hatch:
        base: polygons
        mix: [functions-aastep, pallete, patterns-stripes, space-screen]
        shaders:
            blocks:
                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(color.rgb,background,diagonalStripes(st*300.));
